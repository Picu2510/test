/*! flatpickr-lite 0.1 — A tiny offline shim compatible with flatpickr(options used in this project).
 *  This is NOT the real flatpickr. It only supports:
 *   - enableTime: true/false
 *   - dateFormat: "Y-m-d" or "Y-m-d H:i"
 *   - time_24hr: true
 *   - locale: "pl" (labels only, not calendar UI)
 *  It uses native <input type="date"> and <input type="time"> and writes the combined value back
 *  into the original input element.
 */
(function(global){
  "use strict";
  function pad(n){ return (n<10?'0':'') + n; }
  function parseStr(val){
    // Accept "YYYY-MM-DD" or "YYYY-MM-DD HH:MM"
    if(!val) return null;
    var m = /^(\d{4})-(\d{2})-(\d{2})(?:[ T](\d{2}):(\d{2}))?$/.exec(val.trim());
    if(!m) return null;
    var y=+m[1], mo=+m[2], d=+m[3], hh=m[4]!=null?+m[4]:0, mi=m[5]!=null?+m[5]:0;
    return {y:y, m:mo, d:d, hh:hh, mi:mi};
  }
  function format(val, withTime){
    if(!val) return "";
    var date = val;
    var s = date.y + "-" + pad(date.m) + "-" + pad(date.d);
    if(withTime) s += " " + pad(date.hh) + ":" + pad(date.mi);
    return s;
  }
  function buildUI(orig, opts){
    var withTime = !!opts.enableTime || /H:i/.test(opts.dateFormat||"");
    // hide original input but keep in the form
    orig.style.display = "none";
    orig.setAttribute("data-fp-lite", "1");

    var wrap = document.createElement("span");
    wrap.className = "fp-lite";

    var dt = document.createElement("input");
    dt.type = "date";
    dt.setAttribute("aria-label", (opts.locale && opts.locale === "pl") ? "Data" : "Date");

    var tm = null;
    if(withTime){
      tm = document.createElement("input");
      tm.type = "time";
      tm.step = "60"; // minutes precision
      tm.setAttribute("aria-label", (opts.locale && opts.locale === "pl") ? "Czas" : "Time");
    }

    var clearBtn = document.createElement("button");
    clearBtn.type = "button";
    clearBtn.className = "fp-lite__clear";
    clearBtn.textContent = (opts.locale && opts.locale === "pl") ? "Wyczyść" : "Clear";

    // initial value from original
    var cur = parseStr(orig.value);
    if(cur){
      dt.value = cur.y + "-" + pad(cur.m) + "-" + pad(cur.d);
      if(tm) tm.value = pad(cur.hh) + ":" + pad(cur.mi);
    }

    function syncBack(){
      var hasDate = !!dt.value;
      var hasTime = tm ? !!tm.value : false;
      if(!hasDate){
        orig.value = "";
        return;
      }
      var d = dt.value.split("-");
      var y = +d[0], m = +d[1], day = +d[2];
      var hh = 0, mi = 0;
      if(tm && hasTime){
        var t = tm.value.split(":");
        hh = +t[0]; mi = +t[1];
      }
      orig.value = y + "-" + (m<10?"0":"") + m + "-" + (day<10?"0":"")+ day + (withTime?(" " + (hh<10?"0":"")+hh + ":" + (mi<10?"0":"")+mi):"");
      if(typeof opts.onChange === "function"){
        try { opts.onChange([{dateObj: null, format: function(){return orig.value;}}]); } catch(e){}
      }
    }

    dt.addEventListener("change", syncBack);
    if(tm) tm.addEventListener("change", syncBack);

    clearBtn.addEventListener("click", function(){
      dt.value = "";
      if(tm) tm.value = "";
      orig.value = "";
      orig.dispatchEvent(new Event("change",{bubbles:true}));
    });

    wrap.appendChild(dt);
    if(tm) wrap.appendChild(tm);
    wrap.appendChild(clearBtn);
    orig.parentNode.insertBefore(wrap, orig.nextSibling);

    return {
      setDate: function(str){ 
        var v = parseStr(str);
        if(!v){ dt.value=""; if(tm) tm.value=""; orig.value=""; return; }
        dt.value = v.y + "-" + (v.m<10?"0":"")+v.m + "-" + (v.d<10?"0":"")+v.d;
        if(tm) tm.value = (v.hh<10?"0":"")+v.hh + ":" + (v.mi<10?"0":"")+v.mi;
        orig.value = format(v, withTime);
      },
      destroy: function(){
        wrap.remove();
        orig.style.display = "";
        orig.removeAttribute("data-fp-lite");
      }
    };
  }

  function flatpickr(selector, options){
    var opts = options || {};
    var nodes;
    if(typeof selector === "string"){
      nodes = Array.prototype.slice.call(document.querySelectorAll(selector));
    } else if(selector && selector.nodeType === 1){
      nodes = [selector];
    } else if(Array.isArray(selector)){
      nodes = selector;
    } else {
      nodes = [];
    }
    var instances = nodes.map(function(n){ return buildUI(n, opts); });
    // return API similar-ish to flatpickr
    return instances.length === 1 ? instances[0] : instances;
  }
  flatpickr.l10ns = { pl: { firstDayOfWeek: 1 } };
  flatpickr.localize = function(){ /* no-op in lite */ };
  global.flatpickr = global.flatpickr || flatpickr;
})(window);
